name: 'RelizaHub PullRequest Workflow'
description: 'Submit PullRequest metadata on RelizaHub'
branding:
  icon: 'info'
  color: 'green'
inputs:
  reliza_api_id:
    description: "Reliza Hub API ID"
    required: true
  reliza_api_key:
    description: "Reliza Hub API KEY"
    required: true
  reliza_api_url:
    description: "Reliza Hub API URL"
    required: false
    default: 'https://app.relizahub.com'
  path:
    description: "Path to the relative to root of the repo (default is '.')"
    required: false
    default: .
  reliza_project_id:
    description: "Project UUID for this release if org-wide key is used"
    required: false
runs:
  using: "composite"
  steps:
    - id: setup-reliza-cli
      name: setup-reliza-cli
      uses: relizaio/setup-reliza-cli@1.0
      with: 
        version: 2023.04.0
    - id: reliza-build-start 
      name: Record build start 
      run: echo "reliza_build_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Extract Last Release Commit And Prepare List Of Commits
      id: extract-commits
      shell: bash
      run: |
        cd ${{ inputs.path }}
        
        # Get Latest Commit
        
        echo -n "-i ${{ inputs.reliza_api_id }} -k ${{ inputs.reliza_api_key }} -u ${{ inputs.reliza_api_url }} -b ${{ github.head_ref }} --status pending "  > get_latest_release_cmd
        if [ ! -z ${{inputs.reliza_project_id}} ]
        then
          echo " --project ${{inputs.reliza_project_id}} " >> get_latest_release_cmd
        fi
        echo -n "reliza-cli getlatestrelease $(cat get_latest_release_cmd) " > get_latest_release_exec
        latest_release=$(eval "$(cat get_latest_release_exec)")
        last_commit=$(echo $latest_release | jq -r ".sourceCodeEntryDetails.commit")
        echo "reliza_last_commit=$last_commit" >> $GITHUB_OUTPUT
        

        # Intialize pr command

        echo -n "-i ${{ inputs.reliza_api_id }} -k ${{ inputs.reliza_api_key }} -u ${{ inputs.reliza_api_url }} " > pr_cmd 
        echo "--state ${{ github.event.pull_request.state }} " >> pr_cmd
        if [ ! -z ${{inputs.reliza_project_id}} ]
        then
          echo " --project ${{inputs.reliza_project_id}} " >> pr_cmd
        fi
        
        echo "--branch ${{ github.head_ref }} " >> pr_cmd
        echo "--targetBranch ${{ github.base_ref }} " >> pr_cmd
        echo "--endpoint ${{ github.event.pull_request.html_url }} " >> pr_cmd
        echo "--number ${{ github.event.number }} " >> pr_cmd
        echo "--title \"${{ github.event.pull_request.title }}\" " >> pr_cmd
        echo "--createdDate ${{ github.event.pull_request.created_at }} " >> pr_cmd
        if ${{ github.event.pull_request.closed_at != '' }} ; then
          echo "--closedDate ${{ github.event.pull_request.closed_at }} " >> pr_cmd
        fi
        if ${{ github.event.pull_request.merged_at != ''}} ; then
          echo "--mergedDate ${{ github.event.pull_request.merged_at }} " >> pr_cmd
        fi

        #add commit details

        PR_HEAD_COMMIT=${{ github.event.pull_request.head.sha }}
        echo -n "--commit $PR_HEAD_COMMIT \
        --commitmessage \"$(git log -1 --pretty='%s')\" \
        --commitdate $(git log -1 --date=iso-strict --pretty='%ad') \
        --vcstype git \
        --vcsuri github.com/${{github.repository}} " >> pr_cmd

        if [ ! -z "$last_commit" ] && [ ${PR_HEAD_COMMIT} != ${last_commit} ]
        then
          echo -n "--commits $(git log $last_commit..$PR_HEAD_COMMIT --date=iso-strict --pretty='%H|||%ad|||%s|||%an|||%ae' -- ./ | base64 -w 0) " > get_version_command
        fi
                
        
 
        
        echo reliza-cli prdata $(cat pr_cmd) > pr_cmd_exec
        eval $(cat pr_cmd_exec)
